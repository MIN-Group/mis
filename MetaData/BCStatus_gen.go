package MetaData

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *BCNode) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Number":
			z.Number, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Number")
				return
			}
		case "Pubkey":
			z.Pubkey, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Pubkey")
				return
			}
		case "IP":
			z.IP, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "IP")
				return
			}
		case "Is_butler_candidate":
			z.Is_butler_candidate, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Is_butler_candidate")
				return
			}
		case "Is_butler":
			z.Is_butler, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Is_butler")
				return
			}
		case "Is_commissioner":
			z.Is_commissioner, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Is_commissioner")
				return
			}
		case "Height":
			z.Height, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Height")
				return
			}
		case "Agreement":
			z.Agreement, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Agreement")
				return
			}
		case "Txs_num":
			z.Txs_num, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Txs_num")
				return
			}
		case "HostName":
			z.HostName, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "HostName")
				return
			}
		case "AreaName":
			z.AreaName, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "AreaName")
				return
			}
		case "CountryName":
			z.CountryName, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "CountryName")
				return
			}
		case "Longitude":
			z.Longitude, err = dc.ReadFloat64()
			if err != nil {
				err = msgp.WrapError(err, "Longitude")
				return
			}
		case "Latitude":
			z.Latitude, err = dc.ReadFloat64()
			if err != nil {
				err = msgp.WrapError(err, "Latitude")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *BCNode) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 14
	// write "Number"
	err = en.Append(0x8e, 0xa6, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Number)
	if err != nil {
		err = msgp.WrapError(err, "Number")
		return
	}
	// write "Pubkey"
	err = en.Append(0xa6, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79)
	if err != nil {
		return
	}
	err = en.WriteString(z.Pubkey)
	if err != nil {
		err = msgp.WrapError(err, "Pubkey")
		return
	}
	// write "IP"
	err = en.Append(0xa2, 0x49, 0x50)
	if err != nil {
		return
	}
	err = en.WriteString(z.IP)
	if err != nil {
		err = msgp.WrapError(err, "IP")
		return
	}
	// write "Is_butler_candidate"
	err = en.Append(0xb3, 0x49, 0x73, 0x5f, 0x62, 0x75, 0x74, 0x6c, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Is_butler_candidate)
	if err != nil {
		err = msgp.WrapError(err, "Is_butler_candidate")
		return
	}
	// write "Is_butler"
	err = en.Append(0xa9, 0x49, 0x73, 0x5f, 0x62, 0x75, 0x74, 0x6c, 0x65, 0x72)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Is_butler)
	if err != nil {
		err = msgp.WrapError(err, "Is_butler")
		return
	}
	// write "Is_commissioner"
	err = en.Append(0xaf, 0x49, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x72)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Is_commissioner)
	if err != nil {
		err = msgp.WrapError(err, "Is_commissioner")
		return
	}
	// write "Height"
	err = en.Append(0xa6, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Height)
	if err != nil {
		err = msgp.WrapError(err, "Height")
		return
	}
	// write "Agreement"
	err = en.Append(0xa9, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Agreement)
	if err != nil {
		err = msgp.WrapError(err, "Agreement")
		return
	}
	// write "Txs_num"
	err = en.Append(0xa7, 0x54, 0x78, 0x73, 0x5f, 0x6e, 0x75, 0x6d)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Txs_num)
	if err != nil {
		err = msgp.WrapError(err, "Txs_num")
		return
	}
	// write "HostName"
	err = en.Append(0xa8, 0x48, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.HostName)
	if err != nil {
		err = msgp.WrapError(err, "HostName")
		return
	}
	// write "AreaName"
	err = en.Append(0xa8, 0x41, 0x72, 0x65, 0x61, 0x4e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.AreaName)
	if err != nil {
		err = msgp.WrapError(err, "AreaName")
		return
	}
	// write "CountryName"
	err = en.Append(0xab, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.CountryName)
	if err != nil {
		err = msgp.WrapError(err, "CountryName")
		return
	}
	// write "Longitude"
	err = en.Append(0xa9, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65)
	if err != nil {
		return
	}
	err = en.WriteFloat64(z.Longitude)
	if err != nil {
		err = msgp.WrapError(err, "Longitude")
		return
	}
	// write "Latitude"
	err = en.Append(0xa8, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65)
	if err != nil {
		return
	}
	err = en.WriteFloat64(z.Latitude)
	if err != nil {
		err = msgp.WrapError(err, "Latitude")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *BCNode) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 14
	// string "Number"
	o = append(o, 0x8e, 0xa6, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72)
	o = msgp.AppendInt(o, z.Number)
	// string "Pubkey"
	o = append(o, 0xa6, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79)
	o = msgp.AppendString(o, z.Pubkey)
	// string "IP"
	o = append(o, 0xa2, 0x49, 0x50)
	o = msgp.AppendString(o, z.IP)
	// string "Is_butler_candidate"
	o = append(o, 0xb3, 0x49, 0x73, 0x5f, 0x62, 0x75, 0x74, 0x6c, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65)
	o = msgp.AppendBool(o, z.Is_butler_candidate)
	// string "Is_butler"
	o = append(o, 0xa9, 0x49, 0x73, 0x5f, 0x62, 0x75, 0x74, 0x6c, 0x65, 0x72)
	o = msgp.AppendBool(o, z.Is_butler)
	// string "Is_commissioner"
	o = append(o, 0xaf, 0x49, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x72)
	o = msgp.AppendBool(o, z.Is_commissioner)
	// string "Height"
	o = append(o, 0xa6, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74)
	o = msgp.AppendInt(o, z.Height)
	// string "Agreement"
	o = append(o, 0xa9, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74)
	o = msgp.AppendInt(o, z.Agreement)
	// string "Txs_num"
	o = append(o, 0xa7, 0x54, 0x78, 0x73, 0x5f, 0x6e, 0x75, 0x6d)
	o = msgp.AppendInt(o, z.Txs_num)
	// string "HostName"
	o = append(o, 0xa8, 0x48, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.HostName)
	// string "AreaName"
	o = append(o, 0xa8, 0x41, 0x72, 0x65, 0x61, 0x4e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.AreaName)
	// string "CountryName"
	o = append(o, 0xab, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.CountryName)
	// string "Longitude"
	o = append(o, 0xa9, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65)
	o = msgp.AppendFloat64(o, z.Longitude)
	// string "Latitude"
	o = append(o, 0xa8, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65)
	o = msgp.AppendFloat64(o, z.Latitude)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *BCNode) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Number":
			z.Number, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Number")
				return
			}
		case "Pubkey":
			z.Pubkey, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Pubkey")
				return
			}
		case "IP":
			z.IP, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "IP")
				return
			}
		case "Is_butler_candidate":
			z.Is_butler_candidate, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Is_butler_candidate")
				return
			}
		case "Is_butler":
			z.Is_butler, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Is_butler")
				return
			}
		case "Is_commissioner":
			z.Is_commissioner, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Is_commissioner")
				return
			}
		case "Height":
			z.Height, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Height")
				return
			}
		case "Agreement":
			z.Agreement, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Agreement")
				return
			}
		case "Txs_num":
			z.Txs_num, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Txs_num")
				return
			}
		case "HostName":
			z.HostName, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "HostName")
				return
			}
		case "AreaName":
			z.AreaName, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "AreaName")
				return
			}
		case "CountryName":
			z.CountryName, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "CountryName")
				return
			}
		case "Longitude":
			z.Longitude, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Longitude")
				return
			}
		case "Latitude":
			z.Latitude, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Latitude")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *BCNode) Msgsize() (s int) {
	s = 1 + 7 + msgp.IntSize + 7 + msgp.StringPrefixSize + len(z.Pubkey) + 3 + msgp.StringPrefixSize + len(z.IP) + 20 + msgp.BoolSize + 10 + msgp.BoolSize + 16 + msgp.BoolSize + 7 + msgp.IntSize + 10 + msgp.IntSize + 8 + msgp.IntSize + 9 + msgp.StringPrefixSize + len(z.HostName) + 9 + msgp.StringPrefixSize + len(z.AreaName) + 12 + msgp.StringPrefixSize + len(z.CountryName) + 10 + msgp.Float64Size + 9 + msgp.Float64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *BCStatus) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "agree":
			z.Agree, err = dc.ReadFloat64()
			if err != nil {
				err = msgp.WrapError(err, "Agree")
				return
			}
		case "no_state":
			z.NoState, err = dc.ReadFloat64()
			if err != nil {
				err = msgp.WrapError(err, "NoState")
				return
			}
		case "disagree":
			z.Disagree, err = dc.ReadFloat64()
			if err != nil {
				err = msgp.WrapError(err, "Disagree")
				return
			}
		case "nodeinfo":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Nodeinfo")
				return
			}
			if cap(z.Nodeinfo) >= int(zb0002) {
				z.Nodeinfo = (z.Nodeinfo)[:zb0002]
			} else {
				z.Nodeinfo = make([]BCNode, zb0002)
			}
			for za0001 := range z.Nodeinfo {
				err = z.Nodeinfo[za0001].DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Nodeinfo", za0001)
					return
				}
			}
		case "timestamp":
			z.Timestamp, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Timestamp")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *BCStatus) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 5
	// write "agree"
	err = en.Append(0x85, 0xa5, 0x61, 0x67, 0x72, 0x65, 0x65)
	if err != nil {
		return
	}
	err = en.WriteFloat64(z.Agree)
	if err != nil {
		err = msgp.WrapError(err, "Agree")
		return
	}
	// write "no_state"
	err = en.Append(0xa8, 0x6e, 0x6f, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65)
	if err != nil {
		return
	}
	err = en.WriteFloat64(z.NoState)
	if err != nil {
		err = msgp.WrapError(err, "NoState")
		return
	}
	// write "disagree"
	err = en.Append(0xa8, 0x64, 0x69, 0x73, 0x61, 0x67, 0x72, 0x65, 0x65)
	if err != nil {
		return
	}
	err = en.WriteFloat64(z.Disagree)
	if err != nil {
		err = msgp.WrapError(err, "Disagree")
		return
	}
	// write "nodeinfo"
	err = en.Append(0xa8, 0x6e, 0x6f, 0x64, 0x65, 0x69, 0x6e, 0x66, 0x6f)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Nodeinfo)))
	if err != nil {
		err = msgp.WrapError(err, "Nodeinfo")
		return
	}
	for za0001 := range z.Nodeinfo {
		err = z.Nodeinfo[za0001].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Nodeinfo", za0001)
			return
		}
	}
	// write "timestamp"
	err = en.Append(0xa9, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70)
	if err != nil {
		return
	}
	err = en.WriteString(z.Timestamp)
	if err != nil {
		err = msgp.WrapError(err, "Timestamp")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *BCStatus) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 5
	// string "agree"
	o = append(o, 0x85, 0xa5, 0x61, 0x67, 0x72, 0x65, 0x65)
	o = msgp.AppendFloat64(o, z.Agree)
	// string "no_state"
	o = append(o, 0xa8, 0x6e, 0x6f, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65)
	o = msgp.AppendFloat64(o, z.NoState)
	// string "disagree"
	o = append(o, 0xa8, 0x64, 0x69, 0x73, 0x61, 0x67, 0x72, 0x65, 0x65)
	o = msgp.AppendFloat64(o, z.Disagree)
	// string "nodeinfo"
	o = append(o, 0xa8, 0x6e, 0x6f, 0x64, 0x65, 0x69, 0x6e, 0x66, 0x6f)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Nodeinfo)))
	for za0001 := range z.Nodeinfo {
		o, err = z.Nodeinfo[za0001].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Nodeinfo", za0001)
			return
		}
	}
	// string "timestamp"
	o = append(o, 0xa9, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70)
	o = msgp.AppendString(o, z.Timestamp)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *BCStatus) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "agree":
			z.Agree, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Agree")
				return
			}
		case "no_state":
			z.NoState, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "NoState")
				return
			}
		case "disagree":
			z.Disagree, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Disagree")
				return
			}
		case "nodeinfo":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Nodeinfo")
				return
			}
			if cap(z.Nodeinfo) >= int(zb0002) {
				z.Nodeinfo = (z.Nodeinfo)[:zb0002]
			} else {
				z.Nodeinfo = make([]BCNode, zb0002)
			}
			for za0001 := range z.Nodeinfo {
				bts, err = z.Nodeinfo[za0001].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Nodeinfo", za0001)
					return
				}
			}
		case "timestamp":
			z.Timestamp, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Timestamp")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *BCStatus) Msgsize() (s int) {
	s = 1 + 6 + msgp.Float64Size + 9 + msgp.Float64Size + 9 + msgp.Float64Size + 9 + msgp.ArrayHeaderSize
	for za0001 := range z.Nodeinfo {
		s += z.Nodeinfo[za0001].Msgsize()
	}
	s += 10 + msgp.StringPrefixSize + len(z.Timestamp)
	return
}
