package MetaData

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Account) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "WorkerNumberSet":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "WorkerNumberSet")
				return
			}
			if z.WorkerNumberSet == nil {
				z.WorkerNumberSet = make(map[string]uint32, zb0002)
			} else if len(z.WorkerNumberSet) > 0 {
				for key := range z.WorkerNumberSet {
					delete(z.WorkerNumberSet, key)
				}
			}
			for zb0002 > 0 {
				zb0002--
				var za0001 string
				var za0002 uint32
				za0001, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "WorkerNumberSet")
					return
				}
				za0002, err = dc.ReadUint32()
				if err != nil {
					err = msgp.WrapError(err, "WorkerNumberSet", za0001)
					return
				}
				z.WorkerNumberSet[za0001] = za0002
			}
		case "VoterNumberSet":
			var zb0003 uint32
			zb0003, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "VoterNumberSet")
				return
			}
			if z.VoterNumberSet == nil {
				z.VoterNumberSet = make(map[string]uint32, zb0003)
			} else if len(z.VoterNumberSet) > 0 {
				for key := range z.VoterNumberSet {
					delete(z.VoterNumberSet, key)
				}
			}
			for zb0003 > 0 {
				zb0003--
				var za0003 string
				var za0004 uint32
				za0003, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "VoterNumberSet")
					return
				}
				za0004, err = dc.ReadUint32()
				if err != nil {
					err = msgp.WrapError(err, "VoterNumberSet", za0003)
					return
				}
				z.VoterNumberSet[za0003] = za0004
			}
		case "VoterSet":
			var zb0004 uint32
			zb0004, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "VoterSet")
				return
			}
			if z.VoterSet == nil {
				z.VoterSet = make(map[string]string, zb0004)
			} else if len(z.VoterSet) > 0 {
				for key := range z.VoterSet {
					delete(z.VoterSet, key)
				}
			}
			for zb0004 > 0 {
				zb0004--
				var za0005 string
				var za0006 string
				za0005, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "VoterSet")
					return
				}
				za0006, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "VoterSet", za0005)
					return
				}
				z.VoterSet[za0005] = za0006
			}
		case "WorkerSet":
			var zb0005 uint32
			zb0005, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "WorkerSet")
				return
			}
			if z.WorkerSet == nil {
				z.WorkerSet = make(map[string]string, zb0005)
			} else if len(z.WorkerSet) > 0 {
				for key := range z.WorkerSet {
					delete(z.WorkerSet, key)
				}
			}
			for zb0005 > 0 {
				zb0005--
				var za0007 string
				var za0008 string
				za0007, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "WorkerSet")
					return
				}
				za0008, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "WorkerSet", za0007)
					return
				}
				z.WorkerSet[za0007] = za0008
			}
		case "WorkerCandidateSet":
			var zb0006 uint32
			zb0006, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "WorkerCandidateSet")
				return
			}
			if z.WorkerCandidateSet == nil {
				z.WorkerCandidateSet = make(map[string]string, zb0006)
			} else if len(z.WorkerCandidateSet) > 0 {
				for key := range z.WorkerCandidateSet {
					delete(z.WorkerCandidateSet, key)
				}
			}
			for zb0006 > 0 {
				zb0006--
				var za0009 string
				var za0010 string
				za0009, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "WorkerCandidateSet")
					return
				}
				za0010, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "WorkerCandidateSet", za0009)
					return
				}
				z.WorkerCandidateSet[za0009] = za0010
			}
		case "WorkerCandidateList":
			var zb0007 uint32
			zb0007, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "WorkerCandidateList")
				return
			}
			if cap(z.WorkerCandidateList) >= int(zb0007) {
				z.WorkerCandidateList = (z.WorkerCandidateList)[:zb0007]
			} else {
				z.WorkerCandidateList = make([]string, zb0007)
			}
			for za0011 := range z.WorkerCandidateList {
				z.WorkerCandidateList[za0011], err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "WorkerCandidateList", za0011)
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Account) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 6
	// write "WorkerNumberSet"
	err = en.Append(0x86, 0xaf, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x65, 0x74)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.WorkerNumberSet)))
	if err != nil {
		err = msgp.WrapError(err, "WorkerNumberSet")
		return
	}
	for za0001, za0002 := range z.WorkerNumberSet {
		err = en.WriteString(za0001)
		if err != nil {
			err = msgp.WrapError(err, "WorkerNumberSet")
			return
		}
		err = en.WriteUint32(za0002)
		if err != nil {
			err = msgp.WrapError(err, "WorkerNumberSet", za0001)
			return
		}
	}
	// write "VoterNumberSet"
	err = en.Append(0xae, 0x56, 0x6f, 0x74, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x65, 0x74)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.VoterNumberSet)))
	if err != nil {
		err = msgp.WrapError(err, "VoterNumberSet")
		return
	}
	for za0003, za0004 := range z.VoterNumberSet {
		err = en.WriteString(za0003)
		if err != nil {
			err = msgp.WrapError(err, "VoterNumberSet")
			return
		}
		err = en.WriteUint32(za0004)
		if err != nil {
			err = msgp.WrapError(err, "VoterNumberSet", za0003)
			return
		}
	}
	// write "VoterSet"
	err = en.Append(0xa8, 0x56, 0x6f, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.VoterSet)))
	if err != nil {
		err = msgp.WrapError(err, "VoterSet")
		return
	}
	for za0005, za0006 := range z.VoterSet {
		err = en.WriteString(za0005)
		if err != nil {
			err = msgp.WrapError(err, "VoterSet")
			return
		}
		err = en.WriteString(za0006)
		if err != nil {
			err = msgp.WrapError(err, "VoterSet", za0005)
			return
		}
	}
	// write "WorkerSet"
	err = en.Append(0xa9, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.WorkerSet)))
	if err != nil {
		err = msgp.WrapError(err, "WorkerSet")
		return
	}
	for za0007, za0008 := range z.WorkerSet {
		err = en.WriteString(za0007)
		if err != nil {
			err = msgp.WrapError(err, "WorkerSet")
			return
		}
		err = en.WriteString(za0008)
		if err != nil {
			err = msgp.WrapError(err, "WorkerSet", za0007)
			return
		}
	}
	// write "WorkerCandidateSet"
	err = en.Append(0xb2, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.WorkerCandidateSet)))
	if err != nil {
		err = msgp.WrapError(err, "WorkerCandidateSet")
		return
	}
	for za0009, za0010 := range z.WorkerCandidateSet {
		err = en.WriteString(za0009)
		if err != nil {
			err = msgp.WrapError(err, "WorkerCandidateSet")
			return
		}
		err = en.WriteString(za0010)
		if err != nil {
			err = msgp.WrapError(err, "WorkerCandidateSet", za0009)
			return
		}
	}
	// write "WorkerCandidateList"
	err = en.Append(0xb3, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.WorkerCandidateList)))
	if err != nil {
		err = msgp.WrapError(err, "WorkerCandidateList")
		return
	}
	for za0011 := range z.WorkerCandidateList {
		err = en.WriteString(z.WorkerCandidateList[za0011])
		if err != nil {
			err = msgp.WrapError(err, "WorkerCandidateList", za0011)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Account) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 6
	// string "WorkerNumberSet"
	o = append(o, 0x86, 0xaf, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x65, 0x74)
	o = msgp.AppendMapHeader(o, uint32(len(z.WorkerNumberSet)))
	for za0001, za0002 := range z.WorkerNumberSet {
		o = msgp.AppendString(o, za0001)
		o = msgp.AppendUint32(o, za0002)
	}
	// string "VoterNumberSet"
	o = append(o, 0xae, 0x56, 0x6f, 0x74, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x65, 0x74)
	o = msgp.AppendMapHeader(o, uint32(len(z.VoterNumberSet)))
	for za0003, za0004 := range z.VoterNumberSet {
		o = msgp.AppendString(o, za0003)
		o = msgp.AppendUint32(o, za0004)
	}
	// string "VoterSet"
	o = append(o, 0xa8, 0x56, 0x6f, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74)
	o = msgp.AppendMapHeader(o, uint32(len(z.VoterSet)))
	for za0005, za0006 := range z.VoterSet {
		o = msgp.AppendString(o, za0005)
		o = msgp.AppendString(o, za0006)
	}
	// string "WorkerSet"
	o = append(o, 0xa9, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74)
	o = msgp.AppendMapHeader(o, uint32(len(z.WorkerSet)))
	for za0007, za0008 := range z.WorkerSet {
		o = msgp.AppendString(o, za0007)
		o = msgp.AppendString(o, za0008)
	}
	// string "WorkerCandidateSet"
	o = append(o, 0xb2, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74)
	o = msgp.AppendMapHeader(o, uint32(len(z.WorkerCandidateSet)))
	for za0009, za0010 := range z.WorkerCandidateSet {
		o = msgp.AppendString(o, za0009)
		o = msgp.AppendString(o, za0010)
	}
	// string "WorkerCandidateList"
	o = append(o, 0xb3, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74)
	o = msgp.AppendArrayHeader(o, uint32(len(z.WorkerCandidateList)))
	for za0011 := range z.WorkerCandidateList {
		o = msgp.AppendString(o, z.WorkerCandidateList[za0011])
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Account) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "WorkerNumberSet":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "WorkerNumberSet")
				return
			}
			if z.WorkerNumberSet == nil {
				z.WorkerNumberSet = make(map[string]uint32, zb0002)
			} else if len(z.WorkerNumberSet) > 0 {
				for key := range z.WorkerNumberSet {
					delete(z.WorkerNumberSet, key)
				}
			}
			for zb0002 > 0 {
				var za0001 string
				var za0002 uint32
				zb0002--
				za0001, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "WorkerNumberSet")
					return
				}
				za0002, bts, err = msgp.ReadUint32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "WorkerNumberSet", za0001)
					return
				}
				z.WorkerNumberSet[za0001] = za0002
			}
		case "VoterNumberSet":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "VoterNumberSet")
				return
			}
			if z.VoterNumberSet == nil {
				z.VoterNumberSet = make(map[string]uint32, zb0003)
			} else if len(z.VoterNumberSet) > 0 {
				for key := range z.VoterNumberSet {
					delete(z.VoterNumberSet, key)
				}
			}
			for zb0003 > 0 {
				var za0003 string
				var za0004 uint32
				zb0003--
				za0003, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "VoterNumberSet")
					return
				}
				za0004, bts, err = msgp.ReadUint32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "VoterNumberSet", za0003)
					return
				}
				z.VoterNumberSet[za0003] = za0004
			}
		case "VoterSet":
			var zb0004 uint32
			zb0004, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "VoterSet")
				return
			}
			if z.VoterSet == nil {
				z.VoterSet = make(map[string]string, zb0004)
			} else if len(z.VoterSet) > 0 {
				for key := range z.VoterSet {
					delete(z.VoterSet, key)
				}
			}
			for zb0004 > 0 {
				var za0005 string
				var za0006 string
				zb0004--
				za0005, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "VoterSet")
					return
				}
				za0006, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "VoterSet", za0005)
					return
				}
				z.VoterSet[za0005] = za0006
			}
		case "WorkerSet":
			var zb0005 uint32
			zb0005, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "WorkerSet")
				return
			}
			if z.WorkerSet == nil {
				z.WorkerSet = make(map[string]string, zb0005)
			} else if len(z.WorkerSet) > 0 {
				for key := range z.WorkerSet {
					delete(z.WorkerSet, key)
				}
			}
			for zb0005 > 0 {
				var za0007 string
				var za0008 string
				zb0005--
				za0007, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "WorkerSet")
					return
				}
				za0008, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "WorkerSet", za0007)
					return
				}
				z.WorkerSet[za0007] = za0008
			}
		case "WorkerCandidateSet":
			var zb0006 uint32
			zb0006, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "WorkerCandidateSet")
				return
			}
			if z.WorkerCandidateSet == nil {
				z.WorkerCandidateSet = make(map[string]string, zb0006)
			} else if len(z.WorkerCandidateSet) > 0 {
				for key := range z.WorkerCandidateSet {
					delete(z.WorkerCandidateSet, key)
				}
			}
			for zb0006 > 0 {
				var za0009 string
				var za0010 string
				zb0006--
				za0009, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "WorkerCandidateSet")
					return
				}
				za0010, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "WorkerCandidateSet", za0009)
					return
				}
				z.WorkerCandidateSet[za0009] = za0010
			}
		case "WorkerCandidateList":
			var zb0007 uint32
			zb0007, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "WorkerCandidateList")
				return
			}
			if cap(z.WorkerCandidateList) >= int(zb0007) {
				z.WorkerCandidateList = (z.WorkerCandidateList)[:zb0007]
			} else {
				z.WorkerCandidateList = make([]string, zb0007)
			}
			for za0011 := range z.WorkerCandidateList {
				z.WorkerCandidateList[za0011], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "WorkerCandidateList", za0011)
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Account) Msgsize() (s int) {
	s = 1 + 16 + msgp.MapHeaderSize
	if z.WorkerNumberSet != nil {
		for za0001, za0002 := range z.WorkerNumberSet {
			_ = za0002
			s += msgp.StringPrefixSize + len(za0001) + msgp.Uint32Size
		}
	}
	s += 15 + msgp.MapHeaderSize
	if z.VoterNumberSet != nil {
		for za0003, za0004 := range z.VoterNumberSet {
			_ = za0004
			s += msgp.StringPrefixSize + len(za0003) + msgp.Uint32Size
		}
	}
	s += 9 + msgp.MapHeaderSize
	if z.VoterSet != nil {
		for za0005, za0006 := range z.VoterSet {
			_ = za0006
			s += msgp.StringPrefixSize + len(za0005) + msgp.StringPrefixSize + len(za0006)
		}
	}
	s += 10 + msgp.MapHeaderSize
	if z.WorkerSet != nil {
		for za0007, za0008 := range z.WorkerSet {
			_ = za0008
			s += msgp.StringPrefixSize + len(za0007) + msgp.StringPrefixSize + len(za0008)
		}
	}
	s += 19 + msgp.MapHeaderSize
	if z.WorkerCandidateSet != nil {
		for za0009, za0010 := range z.WorkerCandidateSet {
			_ = za0010
			s += msgp.StringPrefixSize + len(za0009) + msgp.StringPrefixSize + len(za0010)
		}
	}
	s += 20 + msgp.ArrayHeaderSize
	for za0011 := range z.WorkerCandidateList {
		s += msgp.StringPrefixSize + len(z.WorkerCandidateList[za0011])
	}
	return
}
