package MetaData

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Identity) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "keyparam":
			err = z.KeyParam.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "KeyParam")
				return
			}
		case "identityidentifier":
			z.IdentityIdentifier, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "IdentityIdentifier")
				return
			}
		case "pubkey":
			z.Pubkey, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Pubkey")
				return
			}
		case "cert":
			z.Cert, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Cert")
				return
			}
		case "timestamp":
			z.Timestamp, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Timestamp")
				return
			}
		case "type":
			z.Type, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Type")
				return
			}
		case "command":
			z.Command, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Command")
				return
			}
		case "passwd":
			z.Passwd, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Passwd")
				return
			}
		case "ipidentifier":
			z.IPIdentifier, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "IPIdentifier")
				return
			}
		case "modifyrecord":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "ModifyRecords")
				return
			}
			if cap(z.ModifyRecords) >= int(zb0002) {
				z.ModifyRecords = (z.ModifyRecords)[:zb0002]
			} else {
				z.ModifyRecords = make([]ModifyRecord, zb0002)
			}
			for za0001 := range z.ModifyRecords {
				var zb0003 uint32
				zb0003, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "ModifyRecords", za0001)
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						err = msgp.WrapError(err, "ModifyRecords", za0001)
						return
					}
					switch msgp.UnsafeString(field) {
					case "Type":
						z.ModifyRecords[za0001].Type, err = dc.ReadString()
						if err != nil {
							err = msgp.WrapError(err, "ModifyRecords", za0001, "Type")
							return
						}
					case "Command":
						z.ModifyRecords[za0001].Command, err = dc.ReadString()
						if err != nil {
							err = msgp.WrapError(err, "ModifyRecords", za0001, "Command")
							return
						}
					case "Timestamp":
						z.ModifyRecords[za0001].Timestamp, err = dc.ReadString()
						if err != nil {
							err = msgp.WrapError(err, "ModifyRecords", za0001, "Timestamp")
							return
						}
					default:
						err = dc.Skip()
						if err != nil {
							err = msgp.WrapError(err, "ModifyRecords", za0001)
							return
						}
					}
				}
			}
		case "isvalid":
			z.IsValid, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "IsValid")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Identity) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 11
	// write "keyparam"
	err = en.Append(0x8b, 0xa8, 0x6b, 0x65, 0x79, 0x70, 0x61, 0x72, 0x61, 0x6d)
	if err != nil {
		return
	}
	err = z.KeyParam.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "KeyParam")
		return
	}
	// write "identityidentifier"
	err = en.Append(0xb2, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72)
	if err != nil {
		return
	}
	err = en.WriteString(z.IdentityIdentifier)
	if err != nil {
		err = msgp.WrapError(err, "IdentityIdentifier")
		return
	}
	// write "pubkey"
	err = en.Append(0xa6, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79)
	if err != nil {
		return
	}
	err = en.WriteString(z.Pubkey)
	if err != nil {
		err = msgp.WrapError(err, "Pubkey")
		return
	}
	// write "cert"
	err = en.Append(0xa4, 0x63, 0x65, 0x72, 0x74)
	if err != nil {
		return
	}
	err = en.WriteString(z.Cert)
	if err != nil {
		err = msgp.WrapError(err, "Cert")
		return
	}
	// write "timestamp"
	err = en.Append(0xa9, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70)
	if err != nil {
		return
	}
	err = en.WriteString(z.Timestamp)
	if err != nil {
		err = msgp.WrapError(err, "Timestamp")
		return
	}
	// write "type"
	err = en.Append(0xa4, 0x74, 0x79, 0x70, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Type)
	if err != nil {
		err = msgp.WrapError(err, "Type")
		return
	}
	// write "command"
	err = en.Append(0xa7, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.Command)
	if err != nil {
		err = msgp.WrapError(err, "Command")
		return
	}
	// write "passwd"
	err = en.Append(0xa6, 0x70, 0x61, 0x73, 0x73, 0x77, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.Passwd)
	if err != nil {
		err = msgp.WrapError(err, "Passwd")
		return
	}
	// write "ipidentifier"
	err = en.Append(0xac, 0x69, 0x70, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72)
	if err != nil {
		return
	}
	err = en.WriteString(z.IPIdentifier)
	if err != nil {
		err = msgp.WrapError(err, "IPIdentifier")
		return
	}
	// write "modifyrecord"
	err = en.Append(0xac, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.ModifyRecords)))
	if err != nil {
		err = msgp.WrapError(err, "ModifyRecords")
		return
	}
	for za0001 := range z.ModifyRecords {
		// map header, size 3
		// write "Type"
		err = en.Append(0x83, 0xa4, 0x54, 0x79, 0x70, 0x65)
		if err != nil {
			return
		}
		err = en.WriteString(z.ModifyRecords[za0001].Type)
		if err != nil {
			err = msgp.WrapError(err, "ModifyRecords", za0001, "Type")
			return
		}
		// write "Command"
		err = en.Append(0xa7, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64)
		if err != nil {
			return
		}
		err = en.WriteString(z.ModifyRecords[za0001].Command)
		if err != nil {
			err = msgp.WrapError(err, "ModifyRecords", za0001, "Command")
			return
		}
		// write "Timestamp"
		err = en.Append(0xa9, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70)
		if err != nil {
			return
		}
		err = en.WriteString(z.ModifyRecords[za0001].Timestamp)
		if err != nil {
			err = msgp.WrapError(err, "ModifyRecords", za0001, "Timestamp")
			return
		}
	}
	// write "isvalid"
	err = en.Append(0xa7, 0x69, 0x73, 0x76, 0x61, 0x6c, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt(z.IsValid)
	if err != nil {
		err = msgp.WrapError(err, "IsValid")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Identity) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 11
	// string "keyparam"
	o = append(o, 0x8b, 0xa8, 0x6b, 0x65, 0x79, 0x70, 0x61, 0x72, 0x61, 0x6d)
	o, err = z.KeyParam.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "KeyParam")
		return
	}
	// string "identityidentifier"
	o = append(o, 0xb2, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72)
	o = msgp.AppendString(o, z.IdentityIdentifier)
	// string "pubkey"
	o = append(o, 0xa6, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79)
	o = msgp.AppendString(o, z.Pubkey)
	// string "cert"
	o = append(o, 0xa4, 0x63, 0x65, 0x72, 0x74)
	o = msgp.AppendString(o, z.Cert)
	// string "timestamp"
	o = append(o, 0xa9, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70)
	o = msgp.AppendString(o, z.Timestamp)
	// string "type"
	o = append(o, 0xa4, 0x74, 0x79, 0x70, 0x65)
	o = msgp.AppendString(o, z.Type)
	// string "command"
	o = append(o, 0xa7, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64)
	o = msgp.AppendString(o, z.Command)
	// string "passwd"
	o = append(o, 0xa6, 0x70, 0x61, 0x73, 0x73, 0x77, 0x64)
	o = msgp.AppendString(o, z.Passwd)
	// string "ipidentifier"
	o = append(o, 0xac, 0x69, 0x70, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72)
	o = msgp.AppendString(o, z.IPIdentifier)
	// string "modifyrecord"
	o = append(o, 0xac, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64)
	o = msgp.AppendArrayHeader(o, uint32(len(z.ModifyRecords)))
	for za0001 := range z.ModifyRecords {
		// map header, size 3
		// string "Type"
		o = append(o, 0x83, 0xa4, 0x54, 0x79, 0x70, 0x65)
		o = msgp.AppendString(o, z.ModifyRecords[za0001].Type)
		// string "Command"
		o = append(o, 0xa7, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64)
		o = msgp.AppendString(o, z.ModifyRecords[za0001].Command)
		// string "Timestamp"
		o = append(o, 0xa9, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70)
		o = msgp.AppendString(o, z.ModifyRecords[za0001].Timestamp)
	}
	// string "isvalid"
	o = append(o, 0xa7, 0x69, 0x73, 0x76, 0x61, 0x6c, 0x69, 0x64)
	o = msgp.AppendInt(o, z.IsValid)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Identity) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "keyparam":
			bts, err = z.KeyParam.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "KeyParam")
				return
			}
		case "identityidentifier":
			z.IdentityIdentifier, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "IdentityIdentifier")
				return
			}
		case "pubkey":
			z.Pubkey, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Pubkey")
				return
			}
		case "cert":
			z.Cert, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Cert")
				return
			}
		case "timestamp":
			z.Timestamp, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Timestamp")
				return
			}
		case "type":
			z.Type, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Type")
				return
			}
		case "command":
			z.Command, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Command")
				return
			}
		case "passwd":
			z.Passwd, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Passwd")
				return
			}
		case "ipidentifier":
			z.IPIdentifier, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "IPIdentifier")
				return
			}
		case "modifyrecord":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ModifyRecords")
				return
			}
			if cap(z.ModifyRecords) >= int(zb0002) {
				z.ModifyRecords = (z.ModifyRecords)[:zb0002]
			} else {
				z.ModifyRecords = make([]ModifyRecord, zb0002)
			}
			for za0001 := range z.ModifyRecords {
				var zb0003 uint32
				zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ModifyRecords", za0001)
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "ModifyRecords", za0001)
						return
					}
					switch msgp.UnsafeString(field) {
					case "Type":
						z.ModifyRecords[za0001].Type, bts, err = msgp.ReadStringBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "ModifyRecords", za0001, "Type")
							return
						}
					case "Command":
						z.ModifyRecords[za0001].Command, bts, err = msgp.ReadStringBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "ModifyRecords", za0001, "Command")
							return
						}
					case "Timestamp":
						z.ModifyRecords[za0001].Timestamp, bts, err = msgp.ReadStringBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "ModifyRecords", za0001, "Timestamp")
							return
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "ModifyRecords", za0001)
							return
						}
					}
				}
			}
		case "isvalid":
			z.IsValid, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "IsValid")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Identity) Msgsize() (s int) {
	s = 1 + 9 + z.KeyParam.Msgsize() + 19 + msgp.StringPrefixSize + len(z.IdentityIdentifier) + 7 + msgp.StringPrefixSize + len(z.Pubkey) + 5 + msgp.StringPrefixSize + len(z.Cert) + 10 + msgp.StringPrefixSize + len(z.Timestamp) + 5 + msgp.StringPrefixSize + len(z.Type) + 8 + msgp.StringPrefixSize + len(z.Command) + 7 + msgp.StringPrefixSize + len(z.Passwd) + 13 + msgp.StringPrefixSize + len(z.IPIdentifier) + 13 + msgp.ArrayHeaderSize
	for za0001 := range z.ModifyRecords {
		s += 1 + 5 + msgp.StringPrefixSize + len(z.ModifyRecords[za0001].Type) + 8 + msgp.StringPrefixSize + len(z.ModifyRecords[za0001].Command) + 10 + msgp.StringPrefixSize + len(z.ModifyRecords[za0001].Timestamp)
	}
	s += 8 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *KeyParam) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "PublicKeyAlgorithm":
			{
				var zb0002 int
				zb0002, err = dc.ReadInt()
				if err != nil {
					err = msgp.WrapError(err, "PublicKeyAlgorithm")
					return
				}
				z.PublicKeyAlgorithm = PublicKeyAlgorithm(zb0002)
			}
		case "SignatureAlgorithm":
			{
				var zb0003 int
				zb0003, err = dc.ReadInt()
				if err != nil {
					err = msgp.WrapError(err, "SignatureAlgorithm")
					return
				}
				z.SignatureAlgorithm = SignatureAlgorithm(zb0003)
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z KeyParam) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "PublicKeyAlgorithm"
	err = en.Append(0x82, 0xb2, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d)
	if err != nil {
		return
	}
	err = en.WriteInt(int(z.PublicKeyAlgorithm))
	if err != nil {
		err = msgp.WrapError(err, "PublicKeyAlgorithm")
		return
	}
	// write "SignatureAlgorithm"
	err = en.Append(0xb2, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d)
	if err != nil {
		return
	}
	err = en.WriteInt(int(z.SignatureAlgorithm))
	if err != nil {
		err = msgp.WrapError(err, "SignatureAlgorithm")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z KeyParam) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "PublicKeyAlgorithm"
	o = append(o, 0x82, 0xb2, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d)
	o = msgp.AppendInt(o, int(z.PublicKeyAlgorithm))
	// string "SignatureAlgorithm"
	o = append(o, 0xb2, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d)
	o = msgp.AppendInt(o, int(z.SignatureAlgorithm))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *KeyParam) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "PublicKeyAlgorithm":
			{
				var zb0002 int
				zb0002, bts, err = msgp.ReadIntBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "PublicKeyAlgorithm")
					return
				}
				z.PublicKeyAlgorithm = PublicKeyAlgorithm(zb0002)
			}
		case "SignatureAlgorithm":
			{
				var zb0003 int
				zb0003, bts, err = msgp.ReadIntBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "SignatureAlgorithm")
					return
				}
				z.SignatureAlgorithm = SignatureAlgorithm(zb0003)
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z KeyParam) Msgsize() (s int) {
	s = 1 + 19 + msgp.IntSize + 19 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ModifyRecord) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Type":
			z.Type, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Type")
				return
			}
		case "Command":
			z.Command, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Command")
				return
			}
		case "Timestamp":
			z.Timestamp, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Timestamp")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z ModifyRecord) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "Type"
	err = en.Append(0x83, 0xa4, 0x54, 0x79, 0x70, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Type)
	if err != nil {
		err = msgp.WrapError(err, "Type")
		return
	}
	// write "Command"
	err = en.Append(0xa7, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.Command)
	if err != nil {
		err = msgp.WrapError(err, "Command")
		return
	}
	// write "Timestamp"
	err = en.Append(0xa9, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70)
	if err != nil {
		return
	}
	err = en.WriteString(z.Timestamp)
	if err != nil {
		err = msgp.WrapError(err, "Timestamp")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z ModifyRecord) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "Type"
	o = append(o, 0x83, 0xa4, 0x54, 0x79, 0x70, 0x65)
	o = msgp.AppendString(o, z.Type)
	// string "Command"
	o = append(o, 0xa7, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64)
	o = msgp.AppendString(o, z.Command)
	// string "Timestamp"
	o = append(o, 0xa9, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70)
	o = msgp.AppendString(o, z.Timestamp)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ModifyRecord) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Type":
			z.Type, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Type")
				return
			}
		case "Command":
			z.Command, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Command")
				return
			}
		case "Timestamp":
			z.Timestamp, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Timestamp")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z ModifyRecord) Msgsize() (s int) {
	s = 1 + 5 + msgp.StringPrefixSize + len(z.Type) + 8 + msgp.StringPrefixSize + len(z.Command) + 10 + msgp.StringPrefixSize + len(z.Timestamp)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *PublicKeyAlgorithm) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 int
		zb0001, err = dc.ReadInt()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = PublicKeyAlgorithm(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z PublicKeyAlgorithm) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteInt(int(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z PublicKeyAlgorithm) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendInt(o, int(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PublicKeyAlgorithm) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 int
		zb0001, bts, err = msgp.ReadIntBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = PublicKeyAlgorithm(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z PublicKeyAlgorithm) Msgsize() (s int) {
	s = msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *SignatureAlgorithm) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 int
		zb0001, err = dc.ReadInt()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = SignatureAlgorithm(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z SignatureAlgorithm) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteInt(int(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z SignatureAlgorithm) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendInt(o, int(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *SignatureAlgorithm) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 int
		zb0001, bts, err = msgp.ReadIntBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = SignatureAlgorithm(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z SignatureAlgorithm) Msgsize() (s int) {
	s = msgp.IntSize
	return
}
