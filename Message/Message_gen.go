package Message

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	_ "encoding/binary"
	_ "unsafe"

	"github.com/tinylib/msgp/msgp"
	_ "github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *MessageHeader) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Index":
			z.Index, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "Index")
				return
			}
		case "Sender":
			z.Sender, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "Sender")
				return
			}
		case "Receiver":
			z.Receiver, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "Receiver")
				return
			}
		case "Pubkey":
			z.Pubkey, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Pubkey")
				return
			}
		case "MsgType":
			z.MsgType, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "MsgType")
				return
			}
		case "ChildType":
			z.ChildType, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "ChildType")
				return
			}
		case "RespondIndex":
			z.RespondTo, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "RespondTo")
				return
			}
		case "Sig":
			z.Sig, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Sig")
				return
			}
		case "Data":
			z.Data, err = dc.ReadBytes(z.Data)
			if err != nil {
				err = msgp.WrapError(err, "Data")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MessageHeader) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 9
	// write "Index"
	err = en.Append(0x89, 0xa5, 0x49, 0x6e, 0x64, 0x65, 0x78)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.Index)
	if err != nil {
		err = msgp.WrapError(err, "Index")
		return
	}
	// write "Sender"
	err = en.Append(0xa6, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.Sender)
	if err != nil {
		err = msgp.WrapError(err, "Sender")
		return
	}
	// write "Receiver"
	err = en.Append(0xa8, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.Receiver)
	if err != nil {
		err = msgp.WrapError(err, "Receiver")
		return
	}
	// write "Pubkey"
	err = en.Append(0xa6, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79)
	if err != nil {
		return
	}
	err = en.WriteString(z.Pubkey)
	if err != nil {
		err = msgp.WrapError(err, "Pubkey")
		return
	}
	// write "MsgType"
	err = en.Append(0xa7, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt(z.MsgType)
	if err != nil {
		err = msgp.WrapError(err, "MsgType")
		return
	}
	// write "ChildType"
	err = en.Append(0xa9, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt(z.ChildType)
	if err != nil {
		err = msgp.WrapError(err, "ChildType")
		return
	}
	// write "RespondIndex"
	err = en.Append(0xac, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.RespondTo)
	if err != nil {
		err = msgp.WrapError(err, "RespondTo")
		return
	}
	// write "Sig"
	err = en.Append(0xa3, 0x53, 0x69, 0x67)
	if err != nil {
		return
	}
	err = en.WriteString(z.Sig)
	if err != nil {
		err = msgp.WrapError(err, "Sig")
		return
	}
	// write "Data"
	err = en.Append(0xa4, 0x44, 0x61, 0x74, 0x61)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Data)
	if err != nil {
		err = msgp.WrapError(err, "Data")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MessageHeader) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 9
	// string "Index"
	o = append(o, 0x89, 0xa5, 0x49, 0x6e, 0x64, 0x65, 0x78)
	o = msgp.AppendUint64(o, z.Index)
	// string "Sender"
	o = append(o, 0xa6, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72)
	o = msgp.AppendUint64(o, z.Sender)
	// string "Receiver"
	o = append(o, 0xa8, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72)
	o = msgp.AppendUint64(o, z.Receiver)
	// string "Pubkey"
	o = append(o, 0xa6, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79)
	o = msgp.AppendString(o, z.Pubkey)
	// string "MsgType"
	o = append(o, 0xa7, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65)
	o = msgp.AppendInt(o, z.MsgType)
	// string "ChildType"
	o = append(o, 0xa9, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65)
	o = msgp.AppendInt(o, z.ChildType)
	// string "RespondIndex"
	o = append(o, 0xac, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78)
	o = msgp.AppendUint64(o, z.RespondTo)
	// string "Sig"
	o = append(o, 0xa3, 0x53, 0x69, 0x67)
	o = msgp.AppendString(o, z.Sig)
	// string "Data"
	o = append(o, 0xa4, 0x44, 0x61, 0x74, 0x61)
	o = msgp.AppendBytes(o, z.Data)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MessageHeader) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Index":
			z.Index, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Index")
				return
			}
		case "Sender":
			z.Sender, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Sender")
				return
			}
		case "Receiver":
			z.Receiver, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Receiver")
				return
			}
		case "Pubkey":
			z.Pubkey, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Pubkey")
				return
			}
		case "MsgType":
			z.MsgType, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MsgType")
				return
			}
		case "ChildType":
			z.ChildType, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ChildType")
				return
			}
		case "RespondIndex":
			z.RespondTo, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "RespondTo")
				return
			}
		case "Sig":
			z.Sig, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Sig")
				return
			}
		case "Data":
			z.Data, bts, err = msgp.ReadBytesBytes(bts, z.Data)
			if err != nil {
				err = msgp.WrapError(err, "Data")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MessageHeader) Msgsize() (s int) {
	s = 1 + 6 + msgp.Uint64Size + 7 + msgp.Uint64Size + 9 + msgp.Uint64Size + 7 + msgp.StringPrefixSize + len(z.Pubkey) + 8 + msgp.IntSize + 10 + msgp.IntSize + 13 + msgp.Uint64Size + 4 + msgp.StringPrefixSize + len(z.Sig) + 5 + msgp.BytesPrefixSize + len(z.Data)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MessagerManager) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Index":
			z.Index, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "Index")
				return
			}
		case "Pubkey":
			z.Pubkey, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Pubkey")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z MessagerManager) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "Index"
	err = en.Append(0x82, 0xa5, 0x49, 0x6e, 0x64, 0x65, 0x78)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.Index)
	if err != nil {
		err = msgp.WrapError(err, "Index")
		return
	}
	// write "Pubkey"
	err = en.Append(0xa6, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79)
	if err != nil {
		return
	}
	err = en.WriteString(z.Pubkey)
	if err != nil {
		err = msgp.WrapError(err, "Pubkey")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z MessagerManager) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "Index"
	o = append(o, 0x82, 0xa5, 0x49, 0x6e, 0x64, 0x65, 0x78)
	o = msgp.AppendUint64(o, z.Index)
	// string "Pubkey"
	o = append(o, 0xa6, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79)
	o = msgp.AppendString(o, z.Pubkey)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MessagerManager) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Index":
			z.Index, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Index")
				return
			}
		case "Pubkey":
			z.Pubkey, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Pubkey")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z MessagerManager) Msgsize() (s int) {
	s = 1 + 6 + msgp.Uint64Size + 7 + msgp.StringPrefixSize + len(z.Pubkey)
	return
}
