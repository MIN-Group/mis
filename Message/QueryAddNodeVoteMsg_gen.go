package Message

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *QueryAddNodeVoteMsg) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "type":
			z.Type, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Type")
				return
			}
		case "nodeid":
			z.NodeID, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "NodeID")
				return
			}
		case "pubkey":
			z.Pubkey, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Pubkey")
				return
			}
		case "result":
			z.Result, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Result")
				return
			}
		case "sign":
			z.Sign, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Sign")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *QueryAddNodeVoteMsg) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 5
	// write "type"
	err = en.Append(0x85, 0xa4, 0x74, 0x79, 0x70, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Type)
	if err != nil {
		err = msgp.WrapError(err, "Type")
		return
	}
	// write "nodeid"
	err = en.Append(0xa6, 0x6e, 0x6f, 0x64, 0x65, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.NodeID)
	if err != nil {
		err = msgp.WrapError(err, "NodeID")
		return
	}
	// write "pubkey"
	err = en.Append(0xa6, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79)
	if err != nil {
		return
	}
	err = en.WriteString(z.Pubkey)
	if err != nil {
		err = msgp.WrapError(err, "Pubkey")
		return
	}
	// write "result"
	err = en.Append(0xa6, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Result)
	if err != nil {
		err = msgp.WrapError(err, "Result")
		return
	}
	// write "sign"
	err = en.Append(0xa4, 0x73, 0x69, 0x67, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteString(z.Sign)
	if err != nil {
		err = msgp.WrapError(err, "Sign")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *QueryAddNodeVoteMsg) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 5
	// string "type"
	o = append(o, 0x85, 0xa4, 0x74, 0x79, 0x70, 0x65)
	o = msgp.AppendString(o, z.Type)
	// string "nodeid"
	o = append(o, 0xa6, 0x6e, 0x6f, 0x64, 0x65, 0x69, 0x64)
	o = msgp.AppendUint64(o, z.NodeID)
	// string "pubkey"
	o = append(o, 0xa6, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79)
	o = msgp.AppendString(o, z.Pubkey)
	// string "result"
	o = append(o, 0xa6, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74)
	o = msgp.AppendInt(o, z.Result)
	// string "sign"
	o = append(o, 0xa4, 0x73, 0x69, 0x67, 0x6e)
	o = msgp.AppendString(o, z.Sign)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *QueryAddNodeVoteMsg) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "type":
			z.Type, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Type")
				return
			}
		case "nodeid":
			z.NodeID, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "NodeID")
				return
			}
		case "pubkey":
			z.Pubkey, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Pubkey")
				return
			}
		case "result":
			z.Result, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Result")
				return
			}
		case "sign":
			z.Sign, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Sign")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *QueryAddNodeVoteMsg) Msgsize() (s int) {
	s = 1 + 5 + msgp.StringPrefixSize + len(z.Type) + 7 + msgp.Uint64Size + 7 + msgp.StringPrefixSize + len(z.Pubkey) + 7 + msgp.IntSize + 5 + msgp.StringPrefixSize + len(z.Sign)
	return
}
