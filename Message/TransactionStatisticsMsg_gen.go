package Message

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *TransactionStatisticsMsg) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "type":
			z.Type, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Type")
				return
			}
		case "publickey":
			z.Pubkey, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Pubkey")
				return
			}
		case "height":
			z.Height, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Height")
				return
			}
		case "isagree":
			z.Agreement, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Agreement")
				return
			}
		case "txs_num":
			z.Txs_num, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Txs_num")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *TransactionStatisticsMsg) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 5
	// write "type"
	err = en.Append(0x85, 0xa4, 0x74, 0x79, 0x70, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Type)
	if err != nil {
		err = msgp.WrapError(err, "Type")
		return
	}
	// write "publickey"
	err = en.Append(0xa9, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x6b, 0x65, 0x79)
	if err != nil {
		return
	}
	err = en.WriteString(z.Pubkey)
	if err != nil {
		err = msgp.WrapError(err, "Pubkey")
		return
	}
	// write "height"
	err = en.Append(0xa6, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Height)
	if err != nil {
		err = msgp.WrapError(err, "Height")
		return
	}
	// write "isagree"
	err = en.Append(0xa7, 0x69, 0x73, 0x61, 0x67, 0x72, 0x65, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Agreement)
	if err != nil {
		err = msgp.WrapError(err, "Agreement")
		return
	}
	// write "txs_num"
	err = en.Append(0xa7, 0x74, 0x78, 0x73, 0x5f, 0x6e, 0x75, 0x6d)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Txs_num)
	if err != nil {
		err = msgp.WrapError(err, "Txs_num")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *TransactionStatisticsMsg) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 5
	// string "type"
	o = append(o, 0x85, 0xa4, 0x74, 0x79, 0x70, 0x65)
	o = msgp.AppendInt(o, z.Type)
	// string "publickey"
	o = append(o, 0xa9, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x6b, 0x65, 0x79)
	o = msgp.AppendString(o, z.Pubkey)
	// string "height"
	o = append(o, 0xa6, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74)
	o = msgp.AppendInt(o, z.Height)
	// string "isagree"
	o = append(o, 0xa7, 0x69, 0x73, 0x61, 0x67, 0x72, 0x65, 0x65)
	o = msgp.AppendInt(o, z.Agreement)
	// string "txs_num"
	o = append(o, 0xa7, 0x74, 0x78, 0x73, 0x5f, 0x6e, 0x75, 0x6d)
	o = msgp.AppendInt(o, z.Txs_num)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *TransactionStatisticsMsg) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "type":
			z.Type, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Type")
				return
			}
		case "publickey":
			z.Pubkey, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Pubkey")
				return
			}
		case "height":
			z.Height, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Height")
				return
			}
		case "isagree":
			z.Agreement, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Agreement")
				return
			}
		case "txs_num":
			z.Txs_num, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Txs_num")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *TransactionStatisticsMsg) Msgsize() (s int) {
	s = 1 + 5 + msgp.IntSize + 10 + msgp.StringPrefixSize + len(z.Pubkey) + 7 + msgp.IntSize + 8 + msgp.IntSize + 8 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *TransactionStatisticsMsgs) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Type":
			z.Type, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Type")
				return
			}
		case "Msg":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Msg")
				return
			}
			if cap(z.Msg) >= int(zb0002) {
				z.Msg = (z.Msg)[:zb0002]
			} else {
				z.Msg = make([]TransactionStatisticsMsg, zb0002)
			}
			for za0001 := range z.Msg {
				err = z.Msg[za0001].DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Msg", za0001)
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *TransactionStatisticsMsgs) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "Type"
	err = en.Append(0x82, 0xa4, 0x54, 0x79, 0x70, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Type)
	if err != nil {
		err = msgp.WrapError(err, "Type")
		return
	}
	// write "Msg"
	err = en.Append(0xa3, 0x4d, 0x73, 0x67)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Msg)))
	if err != nil {
		err = msgp.WrapError(err, "Msg")
		return
	}
	for za0001 := range z.Msg {
		err = z.Msg[za0001].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Msg", za0001)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *TransactionStatisticsMsgs) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "Type"
	o = append(o, 0x82, 0xa4, 0x54, 0x79, 0x70, 0x65)
	o = msgp.AppendString(o, z.Type)
	// string "Msg"
	o = append(o, 0xa3, 0x4d, 0x73, 0x67)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Msg)))
	for za0001 := range z.Msg {
		o, err = z.Msg[za0001].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Msg", za0001)
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *TransactionStatisticsMsgs) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Type":
			z.Type, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Type")
				return
			}
		case "Msg":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Msg")
				return
			}
			if cap(z.Msg) >= int(zb0002) {
				z.Msg = (z.Msg)[:zb0002]
			} else {
				z.Msg = make([]TransactionStatisticsMsg, zb0002)
			}
			for za0001 := range z.Msg {
				bts, err = z.Msg[za0001].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Msg", za0001)
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *TransactionStatisticsMsgs) Msgsize() (s int) {
	s = 1 + 5 + msgp.StringPrefixSize + len(z.Type) + 4 + msgp.ArrayHeaderSize
	for za0001 := range z.Msg {
		s += z.Msg[za0001].Msgsize()
	}
	return
}
