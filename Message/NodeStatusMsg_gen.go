package Message

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *NodeStatusMsg) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "type":
			z.Type, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Type")
				return
			}
		case "number":
			z.NodeID, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "NodeID")
				return
			}
		case "hostname":
			z.HostName, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "HostName")
				return
			}
		case "areaname":
			z.AreaName, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "AreaName")
				return
			}
		case "countryname":
			z.CountryName, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "CountryName")
				return
			}
		case "longitude":
			z.Longitude, err = dc.ReadFloat64()
			if err != nil {
				err = msgp.WrapError(err, "Longitude")
				return
			}
		case "latitude":
			z.Latitude, err = dc.ReadFloat64()
			if err != nil {
				err = msgp.WrapError(err, "Latitude")
				return
			}
		case "publickey":
			z.Pubkey, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Pubkey")
				return
			}
		case "ip":
			z.IP, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "IP")
				return
			}
		case "isbutlernext":
			z.Is_butler_candidate, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Is_butler_candidate")
				return
			}
		case "isbulter":
			z.Is_butler, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Is_butler")
				return
			}
		case "iscom":
			z.Is_commissioner, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Is_commissioner")
				return
			}
		case "height":
			z.Height, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Height")
				return
			}
		case "isagree":
			z.Agreement, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Agreement")
				return
			}
		case "txs_num":
			z.Txs_num, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Txs_num")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *NodeStatusMsg) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 15
	// write "type"
	err = en.Append(0x8f, 0xa4, 0x74, 0x79, 0x70, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Type)
	if err != nil {
		err = msgp.WrapError(err, "Type")
		return
	}
	// write "number"
	err = en.Append(0xa6, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.NodeID)
	if err != nil {
		err = msgp.WrapError(err, "NodeID")
		return
	}
	// write "hostname"
	err = en.Append(0xa8, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.HostName)
	if err != nil {
		err = msgp.WrapError(err, "HostName")
		return
	}
	// write "areaname"
	err = en.Append(0xa8, 0x61, 0x72, 0x65, 0x61, 0x6e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.AreaName)
	if err != nil {
		err = msgp.WrapError(err, "AreaName")
		return
	}
	// write "countryname"
	err = en.Append(0xab, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x6e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.CountryName)
	if err != nil {
		err = msgp.WrapError(err, "CountryName")
		return
	}
	// write "longitude"
	err = en.Append(0xa9, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65)
	if err != nil {
		return
	}
	err = en.WriteFloat64(z.Longitude)
	if err != nil {
		err = msgp.WrapError(err, "Longitude")
		return
	}
	// write "latitude"
	err = en.Append(0xa8, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65)
	if err != nil {
		return
	}
	err = en.WriteFloat64(z.Latitude)
	if err != nil {
		err = msgp.WrapError(err, "Latitude")
		return
	}
	// write "publickey"
	err = en.Append(0xa9, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x6b, 0x65, 0x79)
	if err != nil {
		return
	}
	err = en.WriteString(z.Pubkey)
	if err != nil {
		err = msgp.WrapError(err, "Pubkey")
		return
	}
	// write "ip"
	err = en.Append(0xa2, 0x69, 0x70)
	if err != nil {
		return
	}
	err = en.WriteString(z.IP)
	if err != nil {
		err = msgp.WrapError(err, "IP")
		return
	}
	// write "isbutlernext"
	err = en.Append(0xac, 0x69, 0x73, 0x62, 0x75, 0x74, 0x6c, 0x65, 0x72, 0x6e, 0x65, 0x78, 0x74)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Is_butler_candidate)
	if err != nil {
		err = msgp.WrapError(err, "Is_butler_candidate")
		return
	}
	// write "isbulter"
	err = en.Append(0xa8, 0x69, 0x73, 0x62, 0x75, 0x6c, 0x74, 0x65, 0x72)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Is_butler)
	if err != nil {
		err = msgp.WrapError(err, "Is_butler")
		return
	}
	// write "iscom"
	err = en.Append(0xa5, 0x69, 0x73, 0x63, 0x6f, 0x6d)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Is_commissioner)
	if err != nil {
		err = msgp.WrapError(err, "Is_commissioner")
		return
	}
	// write "height"
	err = en.Append(0xa6, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Height)
	if err != nil {
		err = msgp.WrapError(err, "Height")
		return
	}
	// write "isagree"
	err = en.Append(0xa7, 0x69, 0x73, 0x61, 0x67, 0x72, 0x65, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Agreement)
	if err != nil {
		err = msgp.WrapError(err, "Agreement")
		return
	}
	// write "txs_num"
	err = en.Append(0xa7, 0x74, 0x78, 0x73, 0x5f, 0x6e, 0x75, 0x6d)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Txs_num)
	if err != nil {
		err = msgp.WrapError(err, "Txs_num")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *NodeStatusMsg) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 15
	// string "type"
	o = append(o, 0x8f, 0xa4, 0x74, 0x79, 0x70, 0x65)
	o = msgp.AppendString(o, z.Type)
	// string "number"
	o = append(o, 0xa6, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72)
	o = msgp.AppendUint64(o, z.NodeID)
	// string "hostname"
	o = append(o, 0xa8, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.HostName)
	// string "areaname"
	o = append(o, 0xa8, 0x61, 0x72, 0x65, 0x61, 0x6e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.AreaName)
	// string "countryname"
	o = append(o, 0xab, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x6e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.CountryName)
	// string "longitude"
	o = append(o, 0xa9, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65)
	o = msgp.AppendFloat64(o, z.Longitude)
	// string "latitude"
	o = append(o, 0xa8, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65)
	o = msgp.AppendFloat64(o, z.Latitude)
	// string "publickey"
	o = append(o, 0xa9, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x6b, 0x65, 0x79)
	o = msgp.AppendString(o, z.Pubkey)
	// string "ip"
	o = append(o, 0xa2, 0x69, 0x70)
	o = msgp.AppendString(o, z.IP)
	// string "isbutlernext"
	o = append(o, 0xac, 0x69, 0x73, 0x62, 0x75, 0x74, 0x6c, 0x65, 0x72, 0x6e, 0x65, 0x78, 0x74)
	o = msgp.AppendBool(o, z.Is_butler_candidate)
	// string "isbulter"
	o = append(o, 0xa8, 0x69, 0x73, 0x62, 0x75, 0x6c, 0x74, 0x65, 0x72)
	o = msgp.AppendBool(o, z.Is_butler)
	// string "iscom"
	o = append(o, 0xa5, 0x69, 0x73, 0x63, 0x6f, 0x6d)
	o = msgp.AppendBool(o, z.Is_commissioner)
	// string "height"
	o = append(o, 0xa6, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74)
	o = msgp.AppendInt(o, z.Height)
	// string "isagree"
	o = append(o, 0xa7, 0x69, 0x73, 0x61, 0x67, 0x72, 0x65, 0x65)
	o = msgp.AppendInt(o, z.Agreement)
	// string "txs_num"
	o = append(o, 0xa7, 0x74, 0x78, 0x73, 0x5f, 0x6e, 0x75, 0x6d)
	o = msgp.AppendInt(o, z.Txs_num)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *NodeStatusMsg) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "type":
			z.Type, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Type")
				return
			}
		case "number":
			z.NodeID, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "NodeID")
				return
			}
		case "hostname":
			z.HostName, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "HostName")
				return
			}
		case "areaname":
			z.AreaName, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "AreaName")
				return
			}
		case "countryname":
			z.CountryName, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "CountryName")
				return
			}
		case "longitude":
			z.Longitude, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Longitude")
				return
			}
		case "latitude":
			z.Latitude, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Latitude")
				return
			}
		case "publickey":
			z.Pubkey, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Pubkey")
				return
			}
		case "ip":
			z.IP, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "IP")
				return
			}
		case "isbutlernext":
			z.Is_butler_candidate, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Is_butler_candidate")
				return
			}
		case "isbulter":
			z.Is_butler, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Is_butler")
				return
			}
		case "iscom":
			z.Is_commissioner, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Is_commissioner")
				return
			}
		case "height":
			z.Height, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Height")
				return
			}
		case "isagree":
			z.Agreement, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Agreement")
				return
			}
		case "txs_num":
			z.Txs_num, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Txs_num")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *NodeStatusMsg) Msgsize() (s int) {
	s = 1 + 5 + msgp.StringPrefixSize + len(z.Type) + 7 + msgp.Uint64Size + 9 + msgp.StringPrefixSize + len(z.HostName) + 9 + msgp.StringPrefixSize + len(z.AreaName) + 12 + msgp.StringPrefixSize + len(z.CountryName) + 10 + msgp.Float64Size + 9 + msgp.Float64Size + 10 + msgp.StringPrefixSize + len(z.Pubkey) + 3 + msgp.StringPrefixSize + len(z.IP) + 13 + msgp.BoolSize + 9 + msgp.BoolSize + 6 + msgp.BoolSize + 7 + msgp.IntSize + 8 + msgp.IntSize + 8 + msgp.IntSize
	return
}
